import { VercelRequest, VercelResponse } from '@vercel/node';
import { z } from 'zod';

// Request validation schema
const ImageGenerationRequest = z.object({
  data: z.object({
    name: z.string(),
    role: z.string(),
    timezone: z.string(),
    skills: z.string(),
    projects: z.string()
  })
});

// Generate HTML for welcome card
function generateWelcomeCardHTML(data: any) {
  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=600, height=800">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
    
    body {
      margin: 0;
      padding: 0;
      width: 600px;
      height: 800px;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
      color: #ffffff;
      position: relative;
      overflow: hidden;
    }
    
    .container {
      padding: 40px 50px;
      height: 100%;
      box-sizing: border-box;
      position: relative;
    }
    
    .border-top {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 5px;
      background: rgba(255, 215, 0, 0.3);
    }
    
    .border-bottom {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 5px;
      background: rgba(255, 215, 0, 0.3);
    }
    
    .profile-circle {
      position: absolute;
      top: 50px;
      right: 70px;
      width: 100px;
      height: 100px;
      border-radius: 50%;
      background: #ffd700;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 40px;
      color: #1a1a2e;
    }
    
    .welcome-header {
      font-size: 28px;
      font-weight: 700;
      margin-bottom: 20px;
      color: #ffffff;
    }
    
    .role {
      font-size: 18px;
      color: #a8a8a8;
      margin-bottom: 40px;
      font-weight: 400;
    }
    
    .section {
      margin-bottom: 35px;
    }
    
    .section-header {
      font-size: 20px;
      font-weight: 600;
      color: #ffd700;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .section-content {
      font-size: 16px;
      color: #ffffff;
      line-height: 1.5;
      font-weight: 400;
      max-width: 450px;
      word-wrap: break-word;
    }
    
    .emoji {
      font-size: 24px;
    }
    
    .footer {
      position: absolute;
      bottom: 30px;
      right: 50px;
      font-size: 12px;
      color: #7d8590;
    }
  </style>
</head>
<body>
  <div class="border-top"></div>
  <div class="border-bottom"></div>
  
  <div class="container">
    <div class="profile-circle">üë§</div>
    
    <div class="welcome-header">üëã Welcome ${data.name}!</div>
    <div class="role">${data.role}</div>
    
    <div class="section">
      <div class="section-header">
        <span class="emoji">üåç</span>
        <span>Timezone</span>
      </div>
      <div class="section-content">${data.timezone}</div>
    </div>
    
    <div class="section">
      <div class="section-header">
        <span class="emoji">üî®</span>
        <span>Skills</span>
      </div>
      <div class="section-content">${data.skills}</div>
    </div>
    
    <div class="section">
      <div class="section-header">
        <span class="emoji">üöÄ</span>
        <span>Projects</span>
      </div>
      <div class="section-content">${data.projects}</div>
    </div>
    
    <div class="footer">Generated by Image API</div>
  </div>
</body>
</html>`;
}

// Convert HTML to image using Playwright
async function htmlToImage(html: string) {
  let browser;
  
  try {
    const { chromium } = await import('playwright-core');
    
    browser = await chromium.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    await page.setViewportSize({ width: 600, height: 800 });
    await page.setContent(html, { waitUntil: 'networkidle' });
    
    const imageBuffer = await page.screenshot({
      type: 'png',
      fullPage: false,
      clip: { x: 0, y: 0, width: 600, height: 800 }
    });
    
    return imageBuffer;
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
  // Only allow POST requests
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const validatedData = ImageGenerationRequest.parse(req.body);
    const { data } = validatedData;

    // Generate HTML
    const html = generateWelcomeCardHTML(data);
    
    // Convert to image
    const imageBuffer = await htmlToImage(html);

    // Set response headers
    res.setHeader('Content-Type', 'image/png');
    res.setHeader('Content-Disposition', 'attachment; filename="welcome-card.png"');
    
    // Send the image
    res.send(imageBuffer);

  } catch (error) {
    console.error('Error generating image:', error);
    if (error instanceof z.ZodError) {
      res.status(400).json({ error: 'Invalid request data', details: error.errors });
    } else {
      res.status(500).json({ error: 'Internal server error', details: error.message });
    }
  }
}
