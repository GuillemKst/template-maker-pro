import { VercelRequest, VercelResponse } from '@vercel/node';
import { z } from 'zod';

// Request validation schema
const ImageGenerationRequest = z.object({
  data: z.object({
    name: z.string(),
    role: z.string(),
    timezone: z.string(),
    skills: z.string(),
    projects: z.string()
  })
});

// Helper function to wrap text
function wrapText(text: string, maxLength: number = 50): string[] {
  const words = text.split(' ');
  const lines: string[] = [];
  let currentLine = '';

  for (const word of words) {
    if ((currentLine + word).length <= maxLength) {
      currentLine += (currentLine ? ' ' : '') + word;
    } else {
      if (currentLine) lines.push(currentLine);
      currentLine = word;
    }
  }
  if (currentLine) lines.push(currentLine);
  return lines;
}

// Generate SVG welcome card
function generateWelcomeCardSVG(data: any): string {
  const skillsLines = wrapText(data.skills, 45);
  const projectsLines = wrapText(data.projects, 45);
  
  let skillsY = 380;
  let projectsY = skillsY + 60 + (skillsLines.length * 22);
  
  const skillsTextElements = skillsLines.map((line, index) => 
    `<text x="60" y="${skillsY + 30 + (index * 22)}" fill="#ffffff" font-size="16" font-family="Arial, sans-serif">${line}</text>`
  ).join('\n    ');
  
  const projectsTextElements = projectsLines.map((line, index) => 
    `<text x="60" y="${projectsY + 30 + (index * 22)}" fill="#ffffff" font-size="16" font-family="Arial, sans-serif">${line}</text>`
  ).join('\n    ');

  return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="600" height="800" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="bgGradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:#1a1a2e;stop-opacity:1" />
      <stop offset="50%" style="stop-color:#16213e;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#0f3460;stop-opacity:1" />
    </linearGradient>
    <style>
      .emoji { font-family: "Apple Color Emoji", "Segoe UI Emoji", sans-serif; }
    </style>
  </defs>
  
  <!-- Background -->
  <rect width="600" height="800" fill="url(#bgGradient)" />
  
  <!-- Top border -->
  <rect x="0" y="0" width="600" height="5" fill="rgba(255, 215, 0, 0.3)" />
  
  <!-- Bottom border -->
  <rect x="0" y="795" width="600" height="5" fill="rgba(255, 215, 0, 0.3)" />
  
  <!-- Profile circle -->
  <circle cx="480" cy="100" r="50" fill="#ffd700" />
  <text x="480" y="115" text-anchor="middle" fill="#1a1a2e" font-size="32" class="emoji">üë§</text>
  
  <!-- Welcome header -->
  <text x="60" y="100" fill="#ffffff" font-size="28" font-weight="bold" font-family="Arial, sans-serif">
    <tspan class="emoji">üëã</tspan> Welcome ${data.name}!
  </text>
  
  <!-- Role -->
  <text x="60" y="140" fill="#a8a8a8" font-size="18" font-family="Arial, sans-serif">${data.role}</text>
  
  <!-- Timezone section -->
  <text x="60" y="220" fill="#ffd700" font-size="20" font-weight="600" font-family="Arial, sans-serif">
    <tspan class="emoji">üåç</tspan> Timezone
  </text>
  <text x="60" y="250" fill="#ffffff" font-size="16" font-family="Arial, sans-serif">${data.timezone}</text>
  
  <!-- Skills section -->
  <text x="60" y="350" fill="#ffd700" font-size="20" font-weight="600" font-family="Arial, sans-serif">
    <tspan class="emoji">üî®</tspan> Skills
  </text>
  ${skillsTextElements}
  
  <!-- Projects section -->
  <text x="60" y="${projectsY}" fill="#ffd700" font-size="20" font-weight="600" font-family="Arial, sans-serif">
    <tspan class="emoji">üöÄ</tspan> Projects
  </text>
  ${projectsTextElements}
  
  <!-- Footer -->
  <text x="540" y="770" text-anchor="end" fill="#7d8590" font-size="12" font-family="Arial, sans-serif">Generated by Image API</text>
</svg>`;
}

// Convert SVG to PNG using a simple approach
async function svgToPng(svgString: string): Promise<Buffer> {
  // For now, return SVG as is since most platforms support SVG
  // In production, you might want to use a service like htmlcsstoimage.com API
  return Buffer.from(svgString, 'utf-8');
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
  // Only allow POST requests
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const validatedData = ImageGenerationRequest.parse(req.body);
    const { data } = validatedData;

    // Generate SVG
    const svgString = generateWelcomeCardSVG(data);
    
    // Check if client wants SVG or PNG
    const format = req.query.format as string || 'svg';
    
    if (format === 'svg') {
      // Return SVG
      res.setHeader('Content-Type', 'image/svg+xml');
      res.setHeader('Content-Disposition', 'attachment; filename="welcome-card.svg"');
      res.send(svgString);
    } else {
      // For PNG, we'll return SVG for now (works in most cases)
      // You can later integrate with a PNG conversion service
      res.setHeader('Content-Type', 'image/svg+xml');
      res.setHeader('Content-Disposition', 'attachment; filename="welcome-card.svg"');
      res.send(svgString);
    }

  } catch (error) {
    console.error('Error generating image:', error);
    if (error instanceof z.ZodError) {
      res.status(400).json({ error: 'Invalid request data', details: error.errors });
    } else {
      res.status(500).json({ error: 'Internal server error', details: error.message });
    }
  }
}
