import express from 'express';
import cors from 'cors';
import { z } from 'zod';

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Request validation schema
const ImageGenerationRequest = z.object({
  data: z.record(z.string()),
  template: z.object({
    width: z.number().default(600),
    height: z.number().default(800),
    backgroundColor: z.string().default('#1a1a2e'),
    textColor: z.string().default('#ffffff'),
    fontSize: z.number().default(16),
    fontFamily: z.string().default('Arial'),
  }).optional()
});

type ImageGenerationData = z.infer<typeof ImageGenerationRequest>;

// Generate HTML for welcome card
function generateWelcomeCardHTML(data: any, config: any) {
  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
    
    body {
      margin: 0;
      padding: 0;
      width: ${config.width}px;
      height: ${config.height}px;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
      color: #ffffff;
      position: relative;
      overflow: hidden;
    }
    
    .container {
      padding: 40px 50px;
      height: 100%;
      box-sizing: border-box;
      position: relative;
    }
    
    .border-top {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 5px;
      background: rgba(255, 215, 0, 0.3);
    }
    
    .border-bottom {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 5px;
      background: rgba(255, 215, 0, 0.3);
    }
    
    .profile-circle {
      position: absolute;
      top: 50px;
      right: 70px;
      width: 100px;
      height: 100px;
      border-radius: 50%;
      background: #ffd700;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 40px;
      color: #1a1a2e;
    }
    
    .welcome-header {
      font-size: 28px;
      font-weight: 700;
      margin-bottom: 20px;
      color: #ffffff;
    }
    
    .role {
      font-size: 18px;
      color: #a8a8a8;
      margin-bottom: 40px;
      font-weight: 400;
    }
    
    .section {
      margin-bottom: 35px;
    }
    
    .section-header {
      font-size: 20px;
      font-weight: 600;
      color: #ffd700;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    
    .section-content {
      font-size: 16px;
      color: #ffffff;
      line-height: 1.5;
      font-weight: 400;
      max-width: 450px;
      word-wrap: break-word;
    }
    
    .emoji {
      font-size: 24px;
    }
    
    .footer {
      position: absolute;
      bottom: 30px;
      right: 50px;
      font-size: 12px;
      color: #7d8590;
    }
  </style>
</head>
<body>
  <div class="border-top"></div>
  <div class="border-bottom"></div>
  
  <div class="container">
    <div class="profile-circle">üë§</div>
    
    <div class="welcome-header">üëã Welcome ${data.name}!</div>
    <div class="role">${data.role}</div>
    
    <div class="section">
      <div class="section-header">
        <span class="emoji">üåç</span>
        <span>Timezone</span>
      </div>
      <div class="section-content">${data.timezone}</div>
    </div>
    
    <div class="section">
      <div class="section-header">
        <span class="emoji">üî®</span>
        <span>Skills</span>
      </div>
      <div class="section-content">${data.skills}</div>
    </div>
    
    <div class="section">
      <div class="section-header">
        <span class="emoji">üöÄ</span>
        <span>Projects</span>
      </div>
      <div class="section-content">${data.projects}</div>
    </div>
    
    <div class="footer">Generated by Image API</div>
  </div>
</body>
</html>`;
}

// Convert HTML to image using Playwright (serverless-friendly)
async function htmlToImage(html: string, width: number, height: number) {
  let browser;
  
  try {
    const { chromium } = await import('@playwright/browser-chromium');
    
    browser = await chromium.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });
    
    const page = await browser.newPage();
    await page.setViewportSize({ width, height });
    await page.setContent(html, { waitUntil: 'networkidle' });
    
    const imageBuffer = await page.screenshot({
      type: 'png',
      fullPage: false,
      clip: { x: 0, y: 0, width, height }
    });
    
    return imageBuffer;
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// Generate image endpoint
app.post('/api/generate-image', async (req, res) => {
  try {
    const validatedData = ImageGenerationRequest.parse(req.body);
    const { data, template } = validatedData;

    // Check if this is a welcome card request
    const isWelcomeCard = data.name && data.role && data.timezone && data.skills && data.projects;
    
    if (!isWelcomeCard) {
      return res.status(400).json({ 
        error: 'Welcome card requires: name, role, timezone, skills, projects' 
      });
    }

    const config = {
      width: template?.width || 600,
      height: template?.height || 800,
      backgroundColor: template?.backgroundColor || '#1a1a2e',
      textColor: template?.textColor || '#ffffff',
      fontSize: template?.fontSize || 16,
      fontFamily: template?.fontFamily || 'Inter'
    };

    // Generate HTML
    const html = generateWelcomeCardHTML(data, config);
    
    // Convert to image
    const imageBuffer = await htmlToImage(html, config.width, config.height);

    // Set response headers
    res.setHeader('Content-Type', 'image/png');
    res.setHeader('Content-Disposition', 'attachment; filename="welcome-card.png"');
    
    // Send the image
    res.send(imageBuffer);

  } catch (error) {
    console.error('Error generating image:', error);
    if (error instanceof z.ZodError) {
      res.status(400).json({ error: 'Invalid request data', details: error.errors });
    } else {
      res.status(500).json({ error: 'Internal server error', details: error.message });
    }
  }
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', message: 'Serverless Image Generator API is running' });
});

// API documentation endpoint
app.get('/api/docs', (req, res) => {
  const documentation = {
    title: 'Serverless Image Generator API',
    version: '2.0.0',
    description: 'Generate welcome cards using HTML/CSS to PNG conversion',
    endpoints: {
      'POST /api/generate-image': {
        description: 'Generate a welcome card image',
        requestBody: {
          data: {
            name: 'string (required)',
            role: 'string (required)', 
            timezone: 'string (required)',
            skills: 'string (required)',
            projects: 'string (required)'
          },
          template: {
            width: 'number (optional, default: 600)',
            height: 'number (optional, default: 800)',
            backgroundColor: 'string (optional)',
            textColor: 'string (optional)',
            fontSize: 'number (optional)',
            fontFamily: 'string (optional)'
          }
        },
        response: {
          type: 'image/png',
          description: 'Generated PNG welcome card'
        }
      }
    },
    example: {
      data: {
        name: 'Guillem',
        role: "I'm a builder",
        timezone: 'Spain/Barcelona',
        skills: 'JavaScript, Node.js, React, TypeScript',
        projects: 'Image Generator API, Discord Bots, Telegram Integrations'
      }
    }
  };
  
  res.json(documentation);
});

// Default route
app.get('/', (req, res) => {
  res.json({ 
    message: 'Serverless Image Generator API', 
    documentation: '/api/docs',
    health: '/api/health' 
  });
});

// For Vercel serverless functions
export default app;

// For local development
if (process.env.NODE_ENV !== 'production') {
  app.listen(PORT, () => {
    console.log(`üöÄ Serverless Image Generator API running on port ${PORT}`);
    console.log(`üìö API Documentation: http://localhost:${PORT}/api/docs`);
    console.log(`‚ù§Ô∏è  Health Check: http://localhost:${PORT}/api/health`);
  });
}
